// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

#![allow(
non_camel_case_types,
unused,
non_snake_case,
clippy::needless_return,
clippy::redundant_closure_call,
clippy::redundant_closure,
clippy::useless_conversion,
clippy::unit_arg,
clippy::unused_unit,
clippy::double_parens,
clippy::let_and_return,
clippy::too_many_arguments,
clippy::match_single_binding,
clippy::clone_on_copy,
clippy::let_unit_value,
clippy::deref_addrof,
clippy::explicit_auto_deref,
clippy::borrow_deref_ref,
clippy::needless_borrow
)]

// Section: imports

use crate::bank::*;
use mo_server::bank::*;
use crate::user_data::*;use crate::mutcell::MakeShared;
use flutter_rust_bridge::{Handler, IntoIntoDart};
use flutter_rust_bridge::for_generated::{Lockable, transform_result_dco, Lifetimeable};
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, WriteBytesExt, ReadBytesExt};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
                    default_stream_sink_codec = SseCodec,
                    default_rust_opaque = RustOpaqueMoi,
                    default_rust_auto_opaque = RustAutoOpaqueMoi,
                );
                pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.4.0";
                pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -1394258933;
            

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__bank__Bank_funds_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "Bank_funds", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Bank>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = Result::<_,()>::Ok(crate::bank::Bank::funds(&*api_that_guard))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__bank__Bank_make_shared_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "Bank_make_shared", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::bank::Bank::make_shared())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__services__scheme__empty_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "empty_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::services::scheme::Empty::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__services__scheme__mo_client_datagram_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mo_client_datagram_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::services::scheme::MoClientDatagram::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__services__scheme__mo_server_datagram_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mo_server_datagram_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::services::scheme::MoServerDatagram::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__services__scheme__tick_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tick_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::services::scheme::Tick::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__user_data__UserData_authenticate_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "UserData_authenticate", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserData>>>::sse_decode(&mut deserializer);
let api_name = <String>::sse_decode(&mut deserializer);
let api_password = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move ||  {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                _ => unreachable!(),
            }
        }
        let mut api_that_guard = api_that_guard.unwrap();
 let output_ok = crate::user_data::UserData::authenticate(&mut *api_that_guard, &api_name, &api_password)?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__user_data__UserData_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "UserData_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::user_data::UserData::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__user_data__UserData_find_user_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "UserData_find_user", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserData>>>::sse_decode(&mut deserializer);
let api_name = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = Result::<_,()>::Ok(crate::user_data::UserData::find_user(&*api_that_guard, &api_name))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__user_data__UserData_known_by_token_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "UserData_known_by_token", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserData>>>::sse_decode(&mut deserializer);
let api_name = <String>::sse_decode(&mut deserializer);
let api_token = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = Result::<_,()>::Ok(crate::user_data::UserData::known_by_token(&*api_that_guard, &api_name, &api_token))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__user_data__UserData_register_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "UserData_register", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserData>>>::sse_decode(&mut deserializer);
let api_name = <String>::sse_decode(&mut deserializer);
let api_password = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move ||  {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                _ => unreachable!(),
            }
        }
        let mut api_that_guard = api_that_guard.unwrap();
 let output_ok = crate::user_data::UserData::register(&mut *api_that_guard, &api_name, &api_password)?;   Ok(output_ok)
                    })())
                } })
            }fn wire__mo_server__local_server__start_local_server_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "start_local_server", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse::<_, ()>((move || async move {
                         let output_ok = Result::<_,()>::Ok(mo_server::local_server::start_local_server().await)?;   Ok(output_ok)
                    })().await)
                } })
            }

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Bank>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Rc < MutCell < Self > >>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserData>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserEntry>);


// Section: dart2rust


                impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);}
                }
                
                impl SseDecode for Bank {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Bank>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}
                }
                
                impl SseDecode for Rc < MutCell < Self > > {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Rc < MutCell < Self > >>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}
                }
                
                impl SseDecode for UserData {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserData>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}
                }
                
                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Bank>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);}
                }
                
                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Rc < MutCell < Self > >>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);}
                }
                
                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserData>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);}
                }
                
                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserEntry>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);}
                }
                
                impl SseDecode for String {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();}
                }
                
                impl SseDecode for bool {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u8().unwrap() != 0}
                }
                
                impl SseDecode for crate::services::scheme::Empty {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {return crate::services::scheme::Empty{};}
                }
                
                impl SseDecode for f64 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_f64::<NativeEndian>().unwrap()}
                }
                
                impl SseDecode for Vec<u8> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for crate::services::scheme::MoClientDatagram {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_version = <u32>::sse_decode(deserializer);
return crate::services::scheme::MoClientDatagram{version: var_version};}
                }
                
                impl SseDecode for crate::services::scheme::MoServerDatagram {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_counter = <u32>::sse_decode(deserializer);
return crate::services::scheme::MoServerDatagram{counter: var_counter};}
                }
                
                impl SseDecode for Option<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserEntry>>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserEntry>>>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for Option<u16> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<u16>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for crate::services::scheme::Tick {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_port = <String>::sse_decode(deserializer);
return crate::services::scheme::Tick{port: var_port};}
                }
                
                impl SseDecode for u16 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u16::<NativeEndian>().unwrap()}
                }
                
                impl SseDecode for u32 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u32::<NativeEndian>().unwrap()}
                }
                
                impl SseDecode for u8 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u8().unwrap()}
                }
                
                impl SseDecode for () {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
                }
                
                impl SseDecode for crate::user_data::UserToken {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_value = <String>::sse_decode(deserializer);
return crate::user_data::UserToken{value: var_value};}
                }
                
                impl SseDecode for usize {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _}
                }
                
                impl SseDecode for i32 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_i32::<NativeEndian>().unwrap()}
                }
                
                fn pde_ffi_dispatcher_primary_impl(
                    func_id: i32,port: flutter_rust_bridge::for_generated::MessagePort,
                    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
                    rust_vec_len: i32,
                    data_len: i32,
                )  {
                    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
                    match func_id {
                        1 => wire__crate__bank__Bank_funds_impl(port, ptr, rust_vec_len, data_len),
2 => wire__crate__bank__Bank_make_shared_impl(port, ptr, rust_vec_len, data_len),
3 => wire__crate__services__scheme__empty_default_impl(port, ptr, rust_vec_len, data_len),
4 => wire__crate__services__scheme__mo_client_datagram_default_impl(port, ptr, rust_vec_len, data_len),
5 => wire__crate__services__scheme__mo_server_datagram_default_impl(port, ptr, rust_vec_len, data_len),
6 => wire__crate__services__scheme__tick_default_impl(port, ptr, rust_vec_len, data_len),
7 => wire__crate__user_data__UserData_authenticate_impl(port, ptr, rust_vec_len, data_len),
8 => wire__crate__user_data__UserData_default_impl(port, ptr, rust_vec_len, data_len),
9 => wire__crate__user_data__UserData_find_user_impl(port, ptr, rust_vec_len, data_len),
10 => wire__crate__user_data__UserData_known_by_token_impl(port, ptr, rust_vec_len, data_len),
11 => wire__crate__user_data__UserData_register_impl(port, ptr, rust_vec_len, data_len),
12 => wire__mo_server__local_server__start_local_server_impl(port, ptr, rust_vec_len, data_len),
                        _ => unreachable!(),
                    }
                }
                
                fn pde_ffi_dispatcher_sync_impl(
                    func_id: i32,
                    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
                    rust_vec_len: i32,
                    data_len: i32,
                ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
                    match func_id {
                        
                        _ => unreachable!(),
                    }
                }
                

// Section: rust2dart


                // Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for FrbWrapper<Bank> {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Bank> {}

                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Bank>> for Bank {
            fn into_into_dart(self) -> FrbWrapper<Bank> {
                self.into()
            }
        }

                
                // Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for FrbWrapper<Rc < MutCell < Self > >> {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Rc < MutCell < Self > >> {}

                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Rc < MutCell < Self > >>> for Rc < MutCell < Self > > {
            fn into_into_dart(self) -> FrbWrapper<Rc < MutCell < Self > >> {
                self.into()
            }
        }

                
                // Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for FrbWrapper<UserData> {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<UserData> {}

                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<UserData>> for UserData {
            fn into_into_dart(self) -> FrbWrapper<UserData> {
                self.into()
            }
        }

                // Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::services::scheme::Empty {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    Vec::<u8>::new().into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::services::scheme::Empty {}
impl flutter_rust_bridge::IntoIntoDart<crate::services::scheme::Empty> for crate::services::scheme::Empty {
            fn into_into_dart(self) -> crate::services::scheme::Empty {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::services::scheme::MoClientDatagram {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.version.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::services::scheme::MoClientDatagram {}
impl flutter_rust_bridge::IntoIntoDart<crate::services::scheme::MoClientDatagram> for crate::services::scheme::MoClientDatagram {
            fn into_into_dart(self) -> crate::services::scheme::MoClientDatagram {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::services::scheme::MoServerDatagram {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.counter.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::services::scheme::MoServerDatagram {}
impl flutter_rust_bridge::IntoIntoDart<crate::services::scheme::MoServerDatagram> for crate::services::scheme::MoServerDatagram {
            fn into_into_dart(self) -> crate::services::scheme::MoServerDatagram {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::services::scheme::Tick {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.port.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::services::scheme::Tick {}
impl flutter_rust_bridge::IntoIntoDart<crate::services::scheme::Tick> for crate::services::scheme::Tick {
            fn into_into_dart(self) -> crate::services::scheme::Tick {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::user_data::UserToken {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.value.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::user_data::UserToken {}
impl flutter_rust_bridge::IntoIntoDart<crate::user_data::UserToken> for crate::user_data::UserToken {
            fn into_into_dart(self) -> crate::user_data::UserToken {
                self
            }
        }

                impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(format!("{:?}", self), serializer);}
                }
                
                impl SseEncode for Bank {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Bank>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}
                }
                
                impl SseEncode for Rc < MutCell < Self > > {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Rc < MutCell < Self > >>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}
                }
                
                impl SseEncode for UserData {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserData>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}
                }
                
                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Bank>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();
                <usize>::sse_encode(ptr, serializer);
                <i32>::sse_encode(size, serializer);}
                }
                
                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Rc < MutCell < Self > >>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();
                <usize>::sse_encode(ptr, serializer);
                <i32>::sse_encode(size, serializer);}
                }
                
                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserData>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();
                <usize>::sse_encode(ptr, serializer);
                <i32>::sse_encode(size, serializer);}
                }
                
                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserEntry>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();
                <usize>::sse_encode(ptr, serializer);
                <i32>::sse_encode(size, serializer);}
                }
                
                impl SseEncode for String {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Vec<u8>>::sse_encode(self.into_bytes(), serializer);}
                }
                
                impl SseEncode for bool {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u8(self as _).unwrap();}
                }
                
                impl SseEncode for crate::services::scheme::Empty {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
                }
                
                impl SseEncode for f64 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_f64::<NativeEndian>(self).unwrap();}
                }
                
                impl SseEncode for Vec<u8> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <u8>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for crate::services::scheme::MoClientDatagram {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<u32>::sse_encode(self.version, serializer);}
                }
                
                impl SseEncode for crate::services::scheme::MoServerDatagram {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<u32>::sse_encode(self.counter, serializer);}
                }
                
                impl SseEncode for Option<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserEntry>>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserEntry>>>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for Option<u16> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <u16>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for crate::services::scheme::Tick {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.port, serializer);}
                }
                
                impl SseEncode for u16 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u16::<NativeEndian>(self).unwrap();}
                }
                
                impl SseEncode for u32 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u32::<NativeEndian>(self).unwrap();}
                }
                
                impl SseEncode for u8 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u8(self).unwrap();}
                }
                
                impl SseEncode for () {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
                }
                
                impl SseEncode for crate::user_data::UserToken {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.value, serializer);}
                }
                
                impl SseEncode for usize {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();}
                }
                
                impl SseEncode for i32 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_i32::<NativeEndian>(self).unwrap();}
                }
                


        
        
        #[cfg(not(target_family = "wasm"))]
        mod io {
            // This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.



// Section: imports

use crate::bank::*;
use mo_server::bank::*;
use crate::user_data::*;use crate::mutcell::MakeShared;
use flutter_rust_bridge::{Handler, IntoIntoDart};
use flutter_rust_bridge::for_generated::{Lockable, transform_result_dco, Lifetimeable};
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, WriteBytesExt, ReadBytesExt};use super::*;

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_io!();

                #[no_mangle]
                pub extern "C" fn frbgen_client_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBank(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Bank>>::increment_strong_count(ptr as _);
                }
            

                #[no_mangle]
                pub extern "C" fn frbgen_client_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBank(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Bank>>::decrement_strong_count(ptr as _);
                }
            

                #[no_mangle]
                pub extern "C" fn frbgen_client_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRcMutCellSelf(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Rc < MutCell < Self > >>>::increment_strong_count(ptr as _);
                }
            

                #[no_mangle]
                pub extern "C" fn frbgen_client_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRcMutCellSelf(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Rc < MutCell < Self > >>>::decrement_strong_count(ptr as _);
                }
            

                #[no_mangle]
                pub extern "C" fn frbgen_client_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserData(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserData>>::increment_strong_count(ptr as _);
                }
            

                #[no_mangle]
                pub extern "C" fn frbgen_client_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserData(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserData>>::decrement_strong_count(ptr as _);
                }
            

                #[no_mangle]
                pub extern "C" fn frbgen_client_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserEntry(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserEntry>>::increment_strong_count(ptr as _);
                }
            

                #[no_mangle]
                pub extern "C" fn frbgen_client_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserEntry(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserEntry>>::decrement_strong_count(ptr as _);
                }
            

        }
        #[cfg(not(target_family = "wasm"))]
        pub use io::*;
        
        
        /// cbindgen:ignore
        #[cfg(target_family = "wasm")]
        mod web {
            // This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.



// Section: imports

use crate::bank::*;
use mo_server::bank::*;
use crate::user_data::*;use crate::mutcell::MakeShared;
use flutter_rust_bridge::{Handler, IntoIntoDart};
use flutter_rust_bridge::for_generated::{Lockable, transform_result_dco, Lifetimeable};
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, WriteBytesExt, ReadBytesExt};use super::*;
                use flutter_rust_bridge::for_generated::wasm_bindgen;
                use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;


// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_web!();

                #[wasm_bindgen]
                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBank(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Bank>>::increment_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBank(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Bank>>::decrement_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRcMutCellSelf(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Rc < MutCell < Self > >>>::increment_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRcMutCellSelf(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Rc < MutCell < Self > >>>::decrement_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserData(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserData>>::increment_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserData(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserData>>::decrement_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserEntry(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserEntry>>::increment_strong_count(ptr as _);
                }
            

                #[wasm_bindgen]
                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserEntry(ptr: *const std::ffi::c_void)  {
                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserEntry>>::decrement_strong_count(ptr as _);
                }
            

        }
        #[cfg(target_family = "wasm")]
        pub use web::*;
        